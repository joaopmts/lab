{"timestamp":"2025-08-24T09:50:25.792601","level":"info","event":"DAG bundles loaded: dags-folder","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-24T09:50:25.793030","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/reddit_silver.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-24T09:50:26.027507","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-24T09:50:26.034390","level":"info","event":"Connection Retrieved 'spark_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-24T09:50:27.130852Z","level":"error","event":"25/08/24 09:50:27 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:27.237773Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:27.238146Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:28.674027Z","level":"error","event":"25/08/24 09:50:28 WARN MetricsConfig: Cannot locate configuration: tried hadoop-metrics2-s3a-file-system.properties,hadoop-metrics2.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:29.698808","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"AnalysisException","exc_value":"[UNABLE_TO_INFER_SCHEMA] Unable to infer schema for JSON. It must be specified manually.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":890,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1177,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/scripts/reddit_silver.py","lineno":78,"name":"write"},{"filename":"/opt/airflow/dags/scripts/reddit_silver.py","lineno":57,"name":"read_by_ext"},{"filename":"/opt/airflow/dags/scripts/reddit_silver.py","lineno":48,"name":"ler_json"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/sql/readwriter.py","lineno":425,"name":"json"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/java_gateway.py","lineno":1322,"name":"__call__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py","lineno":185,"name":"deco"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-08-24T09:50:29.765557Z","level":"error","event":"25/08/24 09:50:29 ERROR TransportRequestHandler: Error sending result StreamResponse[streamId=/jars/aws-java-sdk-bundle-1.12.262.jar,byteCount=280645251,body=FileSegmentManagedBuffer[file=/opt/airflow/conf/jars/aws-java-sdk-bundle-1.12.262.jar,offset=0,length=280645251]] to /172.18.0.12:37888; closing connection","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:29.766007Z","level":"error","event":"io.netty.channel.StacklessClosedChannelException","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-24T09:50:29.766271Z","level":"error","event":"\tat io.netty.channel.AbstractChannel.close(ChannelPromise)(Unknown Source)","chan":"stderr","logger":"task"}
